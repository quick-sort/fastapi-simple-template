"""init tables

Revision ID: 9585fefa87dc
Revises:
Create Date: 2025-03-09 16:08:11.680544

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# import pgvector
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "9585fefa87dc"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("oauth1", "oauth2", "oidc", name="providertype").create(op.get_bind())
    sa.Enum("active", "deactive", name="userstate").create(op.get_bind())
    sa.Enum("admin", "user", name="userrole").create(op.get_bind())
    op.create_table(
        "oauth_providers",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "provider_type",
            postgresql.ENUM(
                "oauth1", "oauth2", "oidc", name="providertype", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("client_id", sa.String(), nullable=False),
        sa.Column("client_secret", sa.String(), nullable=False),
        sa.Column("server_metadata_url", sa.String(), nullable=True),
        sa.Column("api_base_url", sa.String(), nullable=True),
        sa.Column("authorize_url", sa.String(), nullable=True),
        sa.Column("authorize_params", sa.JSON(), nullable=False),
        sa.Column("userinfo_url", sa.String(), nullable=True),
        sa.Column("request_token_url", sa.String(), nullable=True),
        sa.Column("request_token_params", sa.JSON(), nullable=False),
        sa.Column("access_token_url", sa.String(), nullable=True),
        sa.Column("access_token_params", sa.JSON(), nullable=False),
        sa.Column("refresh_token_url", sa.String(), nullable=True),
        sa.Column("refresh_token_params", sa.JSON(), nullable=False),
        sa.Column("redirect_uri", sa.String(), nullable=False),
        sa.Column("client_kwargs", sa.JSON(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("username", sa.String(), nullable=False),
        sa.Column(
            "roles",
            sa.ARRAY(
                postgresql.ENUM("admin", "user", name="userrole", create_type=False)
            ),
            nullable=False,
        ),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column(
            "state",
            postgresql.ENUM("active", "deactive", name="userstate", create_type=False),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "api_keys",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("api_key", sa.String(), nullable=False),
        sa.Column("lastest_access", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_api_keys_api_key"), "api_keys", ["api_key"], unique=False)
    op.create_table(
        "external_users",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("oauth_provider_id", sa.Integer(), nullable=False),
        sa.Column("external_id", sa.String(), nullable=False),
        sa.Column("id_token", sa.Text(), nullable=True),
        sa.Column("access_token", sa.Text(), nullable=False),
        sa.Column("refresh_token", sa.Text(), nullable=False),
        sa.Column("userinfo", sa.JSON(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["oauth_provider_id"], ["oauth_providers.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_external_users_external_id"),
        "external_users",
        ["external_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_external_users_external_id"), table_name="external_users")
    op.drop_table("external_users")
    op.drop_index(op.f("ix_api_keys_api_key"), table_name="api_keys")
    op.drop_table("api_keys")
    op.drop_table("users")
    op.drop_table("oauth_providers")
    sa.Enum("admin", "user", name="userrole").drop(op.get_bind())
    sa.Enum("active", "deactive", name="userstate").drop(op.get_bind())
    sa.Enum("oauth1", "oauth2", "oidc", name="providertype").drop(op.get_bind())
    # ### end Alembic commands ###
