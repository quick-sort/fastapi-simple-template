{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simple FastAPI Project Template","text":"<p>This is a backend api service template based on python stack. </p>"},{"location":"#technology-stack-and-features","title":"Technology Stack and Features","text":""},{"location":"#used-in-production","title":"Used in Production","text":"<ul> <li>FastAPI for the Python backend API.</li> <li>Pydantic, used by FastAPI, for the data validation and settings management.</li> <li>SQLAlchemy for the Python SQL database interactions (ORM).</li> <li>PostgreSQL as the SQL database.</li> <li>Authlib for oauth support.</li> </ul>"},{"location":"#development-env","title":"Development Env","text":"<ul> <li>Poetry for managing Python project dependencies.</li> <li>PyTest for unit test.</li> <li>PyLint for static code analysis.</li> <li>Mkdocs Material generates clean and good looking document like FastAPI documents.</li> </ul>"},{"location":"how-to/database/","title":"Database Related","text":""},{"location":"how-to/database/#install-postgres-in-github-codespace","title":"Install Postgres in Github Codespace","text":"<pre><code>sudo apt install postgresql\nsudo service postgresql start\n</code></pre>"},{"location":"how-to/database/#init-database","title":"Init Database","text":""},{"location":"how-to/database/#create-database","title":"Create Database","text":"<p>create database and user using cmd below and update the values into <code>.env</code> file</p> <pre><code>USER_NAME=fastapi\nUSER_PASSWORD=fastapi\nDB_NAME=app\nsudo su - postgres -c \"psql -c \\\"CREATE USER $USER_NAME WITH PASSWORD '$USER_PASSWORD';\\\"\"\nsudo su - postgres -c \"psql -c 'ALTER ROLE $USER_NAME SUPERUSER;'\"\nsudo su - postgres -c \"psql -c 'CREATE DATABASE $DB_NAME OWNER $USER_NAME;'\"\nsudo su - postgres -c \"psql -c 'GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $USER_NAME;'\"\nsudo su - postgres -c \"psql -c 'CREATE DATABASE ${DB_NAME}_test OWNER $USER_NAME;'\"\nsudo su - postgres -c \"psql -c 'GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME}_test TO $USER_NAME;'\"\n</code></pre> <pre><code>SQLALCHEMY_URI=postgresql+asyncpg://fastapi:fastapi@localhost:5432/app\n</code></pre>"},{"location":"how-to/database/#create-tables","title":"Create Tables","text":"<pre><code>poetry run alembic upgrade head\n</code></pre>"},{"location":"how-to/database/#view-schema-change-history","title":"View Schema Change History","text":"<p>To show all revisions</p> <pre><code>poetry run alembic history\n</code></pre>"},{"location":"how-to/database/#uprade-table-schema","title":"Uprade Table Schema","text":"<p>To generate a new revision</p> <pre><code>poetry run alembic revision --autogenerate -m \"Added New table\"\npoetry run alembic upgrade head\n</code></pre>"},{"location":"how-to/database/#downgrade-table-schema","title":"Downgrade Table Schema","text":"<p>To rollback to brand new</p> <pre><code>poetry run alembic downgrade base\n</code></pre>"},{"location":"how-to/documentation/","title":"Documentation","text":""},{"location":"how-to/documentation/#how-to-view-docs","title":"How to view docs","text":"<pre><code>poetry run mkdocs serve\n</code></pre>"},{"location":"how-to/test/","title":"How to do Unit Test","text":""},{"location":"how-to/test/#prepare-environment","title":"Prepare Environment","text":"<p>prepare a test.env</p> <pre><code>cat &lt;&lt; EOF &gt; .env\nENV=dev\nLOG_LEVEL=INFO\nJWT_SECRET_KEY=$(tr -dc 'a-zA-Z0-9' &lt; /dev/urandom | fold -w 20 | head -n 1)\nJWT_ALGORITHM=HS256\nJWT_EXPIRE_MINUTES=600\nSESSION_SECRET_KEY=secret_key\nSQLALCHEMY_URI=postgresql+asyncpg://$USER_NAME:$USER_PASSWORD@localhost:5432/${DB_NAME}_test\nEOF\n\nCONFIG_ENV_FILE=test.env poetry run alembic downgrade base\nCONFIG_ENV_FILE=test.env poetry run alembic upgrade head\n</code></pre>"},{"location":"how-to/test/#unit-test","title":"Unit Test","text":"<p>configuration of pytest is inside pyproject.toml, section [tool.pytest.ini_options]</p> <pre><code>CONFIG_ENV_FILE=test.env poetry run pytest\n</code></pre> <p>coverage report will be generated in folder <code>cover</code>, use <code>serve cover</code> to open in browser.</p>"},{"location":"how-to/test/#pylint","title":"Pylint","text":"<pre><code>poetry run pylint app\n</code></pre> <p>To disable certain lint warning, edit .pylintrc, add lines to <code>disable</code></p> <pre><code>disable=\n    C0114, # missing-module-docstring\n    C0115, # missing-class-docstring\n</code></pre>"},{"location":"tutorials/get-started/","title":"Get Started","text":""},{"location":"tutorials/get-started/#init-template","title":"Init Template","text":"<p>You can git clone the template to your local workspace, or use this template on github directly.</p> <pre><code>git clone --depth=1 https://github.com/quick-sort/fastapi-simple-template.git myapp\ncd myapp\nrm -rf .git\ngit init\ngit remote add origin git@github.com:quick-sort/myapp.git\ngit add .\ngit commit -m 'init commit'\n</code></pre>"},{"location":"tutorials/get-started/#prerequisites","title":"Prerequisites","text":"<p>Install following softwares:</p> <ul> <li>Python3.12</li> <li>Poetry</li> <li>PostgreSQL</li> </ul>"},{"location":"tutorials/get-started/#install-project-dependencies","title":"Install Project Dependencies","text":"<pre><code>poetry env use 3.12\npoetry install\n</code></pre>"},{"location":"tutorials/get-started/#init-database","title":"Init Database","text":""},{"location":"tutorials/get-started/#create-database-and-user-in-postgresql","title":"Create Database and User in PostgreSQL","text":"<pre><code>USER_NAME=fastapi\nUSER_PASSWORD=fastapi\nDB_NAME=app\nsudo su - postgres -c \"psql -c \\\"CREATE USER $USER_NAME WITH PASSWORD '$USER_PASSWORD';\\\"\"\nsudo su - postgres -c \"psql -c 'create database $DB_NAME OWNER $USER_NAME;'\"\nsudo su - postgres -c \"psql -c 'GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $USER_NAME;'\"\n</code></pre>"},{"location":"tutorials/get-started/#create-environment-file-env","title":"Create Environment File <code>.env</code>","text":"<pre><code>cat &lt;&lt; EOF &gt; .env\nENV=dev\nLOG_LEVEL=INFO\nJWT_SECRET_KEY=$(tr -dc 'a-zA-Z0-9' &lt; /dev/urandom | fold -w 20 | head -n 1)\nJWT_ALGORITHM=HS256\nJWT_EXPIRE_MINUTES=600\nSESSION_SECRET_KEY=secret_key\nSQLALCHEMY_URI=postgresql+asyncpg://$USER_NAME:$USER_PASSWORD@localhost:5432/$DB_NAME\nEOF\n</code></pre>"},{"location":"tutorials/get-started/#create-tables-in-database","title":"Create Tables in Database","text":"<pre><code>poetry run alembic upgrade head\n</code></pre>"},{"location":"tutorials/get-started/#start-service-in-dev-mode","title":"Start Service in Dev mode","text":"<pre><code>poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload\n</code></pre>"},{"location":"tutorials/get-started/#start-service-in-production-mode","title":"Start Service in Production mode","text":"<p>recommend using docker deployment method.</p> <pre><code>poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"tutorials/get-started/#check-service-running","title":"Check Service Running","text":"<p>open <code>http://localhost:8000/api/docs</code> in browser</p>"}]}